{"version":3,"file":"nslo-injector.js","names":[],"mappings":"","sources":["nslo-injector.js"],"sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var n;\"undefined\"!=typeof window?n=window:\"undefined\"!=typeof global?n=global:\"undefined\"!=typeof self&&(n=self),n.nsloInjector=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nfunction defer() {'use strict';\n  var deferred = {};\n  deferred.promise = new Promise(function(resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n/**\n * Creates a new Injector\n * @module nslo-injector\n * @param {array} injectors\n */\nfunction Injector(injectors, modules) {'use strict';\n  if(!this) return new Injector(injectors, modules);\n  if(!modules) modules = {};\n  function get(name) {\n    if(modules[name]) return modules[name];\n    var module = modules[name] = defer();\n    if(injectors) injectors.forEach(function(injector) {\n      injector.require(name).then(module.resolve, module.reject);\n    });\n    return module;\n  }\n\t/**\n\t* require an instance from the injector\n\t* @param {string|array} name - name of module or list of modules to require;\n\t* @returns {Promise}\n\t*/\n  function require(name, locals) {\n    return Array.isArray(name) ? Promise.all(name.map(require)) : get(name).promise;\n  }\n\t/**\n\t * Define an instance\n\t * @param {string}                name - the instance name\n\t * @param {string[]}      dependencies - the instance dependencies\n\t * @param {function|object|Promise} fn - the instance factory or value\n\t * @returns {Promise}\n\t */\n  function define(name, dependencies, fn) {\n    return require(dependencies).then(function(deps) {\n      var defer = get(name);\n      try { defer.resolve(fn.apply ? fn.apply(fn, deps) : fn); }\n      catch (error) { defer.reject(error); }\n      return defer.promise;\n    });\n  }\n  return this.require = require, this.define = define, this;\n}\nmodule.exports = Injector;\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}